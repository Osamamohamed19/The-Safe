
The Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00000900  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000c6  008000c6  000009fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018a4  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097d  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b87  00000000  00000000  00002db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb2  00000000  00000000  0000406b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ec       	ldi	r26, 0xC6	; 198
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3c       	cpi	r26, 0xCA	; 202
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  8a:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:
 */ 
#include "BIT_MATH.h"
#include "Keypad.h"
void Keypad_init(void)
{
	DIO_setPinDirection(PORT,0,1);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	83 e4       	ldi	r24, 0x43	; 67
  98:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT,1,1);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	83 e4       	ldi	r24, 0x43	; 67
  a2:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT,2,1);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	83 e4       	ldi	r24, 0x43	; 67
  ac:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT,3,1);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	83 e4       	ldi	r24, 0x43	; 67
  b6:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT,4,0);
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	83 e4       	ldi	r24, 0x43	; 67
  c0:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT,5,0);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	83 e4       	ldi	r24, 0x43	; 67
  ca:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT,6,0);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	83 e4       	ldi	r24, 0x43	; 67
  d4:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT,7,0);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	67 e0       	ldi	r22, 0x07	; 7
  dc:	83 e4       	ldi	r24, 0x43	; 67
  de:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_connectInternalPullup(PORT,4,1);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	83 e4       	ldi	r24, 0x43	; 67
  e8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_connectInternalPullup>
	DIO_connectInternalPullup(PORT,5,1);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	83 e4       	ldi	r24, 0x43	; 67
  f2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_connectInternalPullup>
	DIO_connectInternalPullup(PORT,6,1);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	66 e0       	ldi	r22, 0x06	; 6
  fa:	83 e4       	ldi	r24, 0x43	; 67
  fc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_connectInternalPullup>
	DIO_connectInternalPullup(PORT,7,1);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	67 e0       	ldi	r22, 0x07	; 7
 104:	83 e4       	ldi	r24, 0x43	; 67
 106:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_connectInternalPullup>
 10a:	08 95       	ret

0000010c <Keypad_read>:
}

unsigned char Keypad_read(void)
{
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	60 97       	sbiw	r28, 0x10	; 16
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'7','8','9','/'},
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	e0 e6       	ldi	r30, 0x60	; 96
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	de 01       	movw	r26, r28
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <Keypad_read+0x22>
							 {'4','5','6','*'},
							 {'1','2','3','-'},
							 {'A','0','=','+'}};
	unsigned char row , col , read_val ;
	unsigned char ret_val = NOTPRESSED ;
	for(row = 0;row < 4;row++)
 136:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_setPinValue(PORT,0,1);
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	83 e4       	ldi	r24, 0x43	; 67
 13e:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
		DIO_setPinValue(PORT,1,1);
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	83 e4       	ldi	r24, 0x43	; 67
 148:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
		DIO_setPinValue(PORT,2,1);
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	83 e4       	ldi	r24, 0x43	; 67
 152:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
		DIO_setPinValue(PORT,3,1);
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	83 e4       	ldi	r24, 0x43	; 67
 15c:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
		DIO_setPinValue(PORT,row,0);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 2f       	mov	r22, r16
 164:	83 e4       	ldi	r24, 0x43	; 67
 166:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
		for(col = 0;col < 4;col++)
 16a:	10 e0       	ldi	r17, 0x00	; 0
		{
			read_val = DIO_getPinValue(PORT,col+4);
 16c:	64 e0       	ldi	r22, 0x04	; 4
 16e:	61 0f       	add	r22, r17
 170:	83 e4       	ldi	r24, 0x43	; 67
 172:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_getPinValue>
			if(read_val == 0)
 176:	81 11       	cpse	r24, r1
 178:	0d c0       	rjmp	.+26     	; 0x194 <Keypad_read+0x88>
			{
				ret_val = arr[row][col];
 17a:	e1 e0       	ldi	r30, 0x01	; 1
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	08 9f       	mul	r16, r24
 186:	e0 0d       	add	r30, r0
 188:	f1 1d       	adc	r31, r1
 18a:	11 24       	eor	r1, r1
 18c:	e1 0f       	add	r30, r17
 18e:	f1 1d       	adc	r31, r1
 190:	80 81       	ld	r24, Z
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <Keypad_read+0x96>
		DIO_setPinValue(PORT,0,1);
		DIO_setPinValue(PORT,1,1);
		DIO_setPinValue(PORT,2,1);
		DIO_setPinValue(PORT,3,1);
		DIO_setPinValue(PORT,row,0);
		for(col = 0;col < 4;col++)
 194:	1f 5f       	subi	r17, 0xFF	; 255
 196:	14 30       	cpi	r17, 0x04	; 4
 198:	49 f7       	brne	.-46     	; 0x16c <Keypad_read+0x60>
							 {'4','5','6','*'},
							 {'1','2','3','-'},
							 {'A','0','=','+'}};
	unsigned char row , col , read_val ;
	unsigned char ret_val = NOTPRESSED ;
	for(row = 0;row < 4;row++)
 19a:	0f 5f       	subi	r16, 0xFF	; 255
 19c:	04 30       	cpi	r16, 0x04	; 4
 19e:	61 f6       	brne	.-104    	; 0x138 <Keypad_read+0x2c>
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
		{
			break ;
		}
	}
	return ret_val;
 1a2:	60 96       	adiw	r28, 0x10	; 16
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	08 95       	ret

000001b8 <Enable>:
#include "DIO_interface.h"
#include "LCD.h"

static void Enable(void)
{
	DIO_setPinValue(PORT_CONTROL,EN,1);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	8f e9       	ldi	r24, 0x9F	; 159
 1c4:	9f e0       	ldi	r25, 0x0F	; 15
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Enable+0xe>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <Enable+0x14>
 1cc:	00 00       	nop
	_delay_ms(2);
	DIO_setPinValue(PORT_CONTROL,EN,0);
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	82 e4       	ldi	r24, 0x42	; 66
 1d4:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <Enable+0x24>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <Enable+0x2a>
 1e2:	00 00       	nop
 1e4:	08 95       	ret

000001e6 <LCD_send_char>:
	_delay_ms(2);
}

void LCD_send_char(unsigned char data)
{
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
	DIO_setPortValue(PORT_DATA,data);
	DIO_setPinValue(PORT_CONTROL,RS,1);
	Enable();
	_delay_ms(1);
	#elif defined four_bits_mode
	DIO_writeHighNibble(PORT_DATA,data>>4);
 1ea:	68 2f       	mov	r22, r24
 1ec:	62 95       	swap	r22
 1ee:	6f 70       	andi	r22, 0x0F	; 15
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <DIO_writeHighNibble>
	DIO_setPinValue(PORT_CONTROL,RS,1);
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	Enable();
 200:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Enable>
	DIO_writeHighNibble(PORT_DATA,data);
 204:	6c 2f       	mov	r22, r28
 206:	81 e4       	ldi	r24, 0x41	; 65
 208:	0e 94 50 04 	call	0x8a0	; 0x8a0 <DIO_writeHighNibble>
	DIO_setPinValue(PORT_CONTROL,RS,1);
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	82 e4       	ldi	r24, 0x42	; 66
 212:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	Enable();
 216:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Enable>
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_send_char+0x38>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_send_char+0x3e>
 224:	00 00       	nop
	_delay_ms(1);
	#endif
}
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <LCD_send_cmd>:

void LCD_send_cmd(unsigned char cmd)
{
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
	DIO_setPortValue(PORT_DATA,cmd);
	DIO_setPinValue(PORT_CONTROL,RS,0);
	Enable();
	_delay_ms(1);
	#elif defined four_bits_mode
	DIO_writeHighNibble(PORT_DATA,cmd>>4);
 22e:	68 2f       	mov	r22, r24
 230:	62 95       	swap	r22
 232:	6f 70       	andi	r22, 0x0F	; 15
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 50 04 	call	0x8a0	; 0x8a0 <DIO_writeHighNibble>
	DIO_setPinValue(PORT_CONTROL,RS,0);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	Enable();
 244:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Enable>
	DIO_writeHighNibble(PORT_DATA,cmd);
 248:	6c 2f       	mov	r22, r28
 24a:	81 e4       	ldi	r24, 0x41	; 65
 24c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <DIO_writeHighNibble>
	DIO_setPinValue(PORT_CONTROL,RS,0);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	82 e4       	ldi	r24, 0x42	; 66
 256:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	Enable();
 25a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Enable>
 25e:	8f ec       	ldi	r24, 0xCF	; 207
 260:	97 e0       	ldi	r25, 0x07	; 7
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_send_cmd+0x38>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_send_cmd+0x3e>
 268:	00 00       	nop
	_delay_ms(1);
	#endif
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <LCD_clr_screen>:

void LCD_clr_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_send_cmd>
 274:	08 95       	ret

00000276 <LCD_init>:
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	81 ee       	ldi	r24, 0xE1	; 225
 27a:	94 e0       	ldi	r25, 0x04	; 4
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <LCD_init+0x6>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_init+0x10>
 286:	00 00       	nop
	LCD_send_cmd(CLR_SCREEN);
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined four_bits_mode
	DIO_setPinDirection(PORT_DATA,4,1);
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT_DATA,5,1);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	81 e4       	ldi	r24, 0x41	; 65
 298:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT_DATA,6,1);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	81 e4       	ldi	r24, 0x41	; 65
 2a2:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT_DATA,7,1);
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT_CONTROL,EN,1);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	82 e4       	ldi	r24, 0x42	; 66
 2b6:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT_CONTROL,RW,1);
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	62 e0       	ldi	r22, 0x02	; 2
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinDirection(PORT_CONTROL,RS,1);
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	82 e4       	ldi	r24, 0x42	; 66
 2ca:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_setPinDirection>
	DIO_setPinValue(PORT_CONTROL,RW,0);
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	82 e4       	ldi	r24, 0x42	; 66
 2d4:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	LCD_send_cmd(RETURN_HOME);
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_send_cmd>
 2de:	8f e1       	ldi	r24, 0x1F	; 31
 2e0:	9e e4       	ldi	r25, 0x4E	; 78
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_init+0x6c>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_init+0x72>
 2e8:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BITS);
 2ea:	88 e2       	ldi	r24, 0x28	; 40
 2ec:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_send_cmd>
 2f0:	8f ec       	ldi	r24, 0xCF	; 207
 2f2:	97 e0       	ldi	r25, 0x07	; 7
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_init+0x7e>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_init+0x84>
 2fa:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CURSOR_OFF_DISPLAY_ON);
 2fc:	8c e0       	ldi	r24, 0x0C	; 12
 2fe:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_send_cmd>
 302:	8f ec       	ldi	r24, 0xCF	; 207
 304:	97 e0       	ldi	r25, 0x07	; 7
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_init+0x90>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_init+0x96>
 30c:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_send_cmd>
 314:	8f e1       	ldi	r24, 0x1F	; 31
 316:	9e e4       	ldi	r25, 0x4E	; 78
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_init+0xa2>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_init+0xa8>
 31e:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_send_cmd>
 326:	8f ec       	ldi	r24, 0xCF	; 207
 328:	97 e0       	ldi	r25, 0x07	; 7
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_init+0xb4>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_init+0xba>
 330:	00 00       	nop
 332:	08 95       	ret

00000334 <LCD_movecursor>:
}

void LCD_movecursor(unsigned char row,unsigned char col)
{
	unsigned char data = 0;
	if((row > 2) || (row < 1) || (col > 16) || (col < 1))
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	98 0f       	add	r25, r24
 338:	92 30       	cpi	r25, 0x02	; 2
 33a:	70 f4       	brcc	.+28     	; 0x358 <LCD_movecursor+0x24>
 33c:	9f ef       	ldi	r25, 0xFF	; 255
 33e:	96 0f       	add	r25, r22
 340:	90 31       	cpi	r25, 0x10	; 16
 342:	60 f4       	brcc	.+24     	; 0x35c <LCD_movecursor+0x28>
	{
		data = 0x80;
	}
	else if(row == 1)
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	19 f4       	brne	.+6      	; 0x34e <LCD_movecursor+0x1a>
	{
		data = 0x80 + col -1;
 348:	8f e7       	ldi	r24, 0x7F	; 127
 34a:	86 0f       	add	r24, r22
 34c:	0a c0       	rjmp	.+20     	; 0x362 <LCD_movecursor+0x2e>
	}
	else if(row == 2)
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	39 f4       	brne	.+14     	; 0x360 <LCD_movecursor+0x2c>
	{
		data = 0xC0 + col -1;
 352:	8f eb       	ldi	r24, 0xBF	; 191
 354:	86 0f       	add	r24, r22
 356:	05 c0       	rjmp	.+10     	; 0x362 <LCD_movecursor+0x2e>
void LCD_movecursor(unsigned char row,unsigned char col)
{
	unsigned char data = 0;
	if((row > 2) || (row < 1) || (col > 16) || (col < 1))
	{
		data = 0x80;
 358:	80 e8       	ldi	r24, 0x80	; 128
 35a:	03 c0       	rjmp	.+6      	; 0x362 <LCD_movecursor+0x2e>
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	01 c0       	rjmp	.+2      	; 0x362 <LCD_movecursor+0x2e>
	#endif
}

void LCD_movecursor(unsigned char row,unsigned char col)
{
	unsigned char data = 0;
 360:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(row == 2)
	{
		data = 0xC0 + col -1;
	}
	LCD_send_cmd(data);
 362:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_send_cmd>
 366:	8f ec       	ldi	r24, 0xCF	; 207
 368:	97 e0       	ldi	r25, 0x07	; 7
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_movecursor+0x36>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_movecursor+0x3c>
 370:	00 00       	nop
 372:	08 95       	ret

00000374 <LCD_sendstring>:
	_delay_ms(1);
}

void LCD_sendstring(unsigned char * data)
{
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
	while(*data != '\0')
 37a:	88 81       	ld	r24, Y
 37c:	88 23       	and	r24, r24
 37e:	31 f0       	breq	.+12     	; 0x38c <LCD_sendstring+0x18>
 380:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_send_char(*data);
 382:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_send_char>
	_delay_ms(1);
}

void LCD_sendstring(unsigned char * data)
{
	while(*data != '\0')
 386:	89 91       	ld	r24, Y+
 388:	81 11       	cpse	r24, r1
 38a:	fb cf       	rjmp	.-10     	; 0x382 <LCD_sendstring+0xe>
	{
		LCD_send_char(*data);
		data++;
	}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <main>:
#define EEPROM_PASSWORD_LOCATION3 0x23
#define EEPROM_PASSWORD_LOCATION4 0x24
#define MAXTRIES 3
unsigned char arr[4];
int main(void)
{
 392:	df 92       	push	r13
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
	unsigned char value = NOTPRESSED;
	unsigned char flag = 0 , i ;
	unsigned char tries = MAXTRIES ;
    LCD_init();
 3a0:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_init>
	Keypad_init();
 3a4:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
	if(EEPROM_read(EEPROM_STATUS_LOCATION) == NOTPRESSED)
 3a8:	80 e2       	ldi	r24, 0x20	; 32
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 79 04 	call	0x8f2	; 0x8f2 <EEPROM_read>
 3b0:	8f 3f       	cpi	r24, 0xFF	; 255
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <main+0x24>
 3b4:	ba c0       	rjmp	.+372    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
	{
		LCD_sendstring("Set Pass : ");
 3b6:	80 e7       	ldi	r24, 0x70	; 112
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
 3be:	01 e2       	ldi	r16, 0x21	; 33
 3c0:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0;i < 4;i++)
		{
			do 
			{
				value = Keypad_read();
 3c2:	0e 94 86 00 	call	0x10c	; 0x10c <Keypad_read>
 3c6:	c8 2f       	mov	r28, r24
			} while (value == NOTPRESSED);
 3c8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ca:	d9 f3       	breq	.-10     	; 0x3c2 <main+0x30>
			LCD_send_char(value);
 3cc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_send_char>
			LCD_movecursor(1,12+i);
 3d0:	6b ee       	ldi	r22, 0xEB	; 235
 3d2:	60 0f       	add	r22, r16
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_movecursor>
			LCD_send_char('*');
 3da:	8a e2       	ldi	r24, 0x2A	; 42
 3dc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_send_char>
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	84 e3       	ldi	r24, 0x34	; 52
 3e4:	9c e0       	ldi	r25, 0x0C	; 12
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x54>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x5e>
 3f0:	00 00       	nop
			_delay_ms(500);
			EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
 3f2:	6c 2f       	mov	r22, r28
 3f4:	c8 01       	movw	r24, r16
 3f6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <EEPROM_write>
 3fa:	0f 5f       	subi	r16, 0xFF	; 255
 3fc:	1f 4f       	sbci	r17, 0xFF	; 255
    LCD_init();
	Keypad_init();
	if(EEPROM_read(EEPROM_STATUS_LOCATION) == NOTPRESSED)
	{
		LCD_sendstring("Set Pass : ");
		for(i = 0;i < 4;i++)
 3fe:	05 32       	cpi	r16, 0x25	; 37
 400:	11 05       	cpc	r17, r1
 402:	f9 f6       	brne	.-66     	; 0x3c2 <main+0x30>
			LCD_movecursor(1,12+i);
			LCD_send_char('*');
			_delay_ms(500);
			EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
		}
		EEPROM_write(EEPROM_STATUS_LOCATION,0x00);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	80 e2       	ldi	r24, 0x20	; 32
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <EEPROM_write>
 40e:	8d c0       	rjmp	.+282    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
	}
	while(flag == 0)
	{
		arr[0] = arr[1] = arr[2] = arr[3] = NOTPRESSED;
 410:	f7 01       	movw	r30, r14
 412:	03 83       	std	Z+3, r16	; 0x03
 414:	02 83       	std	Z+2, r16	; 0x02
 416:	01 83       	std	Z+1, r16	; 0x01
 418:	00 83       	st	Z, r16
		LCD_clr_screen();
 41a:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_clr_screen>
		LCD_sendstring("Check Pass :");
 41e:	8c e7       	ldi	r24, 0x7C	; 124
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
 426:	c6 ec       	ldi	r28, 0xC6	; 198
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	1d e0       	ldi	r17, 0x0D	; 13
		for(i = 0;i < 4;i++)
		{
			do
			{
				arr[i] = Keypad_read();
 42c:	0e 94 86 00 	call	0x10c	; 0x10c <Keypad_read>
 430:	88 83       	st	Y, r24
			} while (arr[i] == NOTPRESSED);
 432:	8f 3f       	cpi	r24, 0xFF	; 255
 434:	d9 f3       	breq	.-10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			LCD_send_char(arr[i]);
 436:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_send_char>
			LCD_movecursor(1,13+i);
 43a:	61 2f       	mov	r22, r17
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_movecursor>
			LCD_send_char('*');
 442:	8a e2       	ldi	r24, 0x2A	; 42
 444:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_send_char>
 448:	ff ef       	ldi	r31, 0xFF	; 255
 44a:	24 e3       	ldi	r18, 0x34	; 52
 44c:	8c e0       	ldi	r24, 0x0C	; 12
 44e:	f1 50       	subi	r31, 0x01	; 1
 450:	20 40       	sbci	r18, 0x00	; 0
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	1f 5f       	subi	r17, 0xFF	; 255
 45c:	21 96       	adiw	r28, 0x01	; 1
	while(flag == 0)
	{
		arr[0] = arr[1] = arr[2] = arr[3] = NOTPRESSED;
		LCD_clr_screen();
		LCD_sendstring("Check Pass :");
		for(i = 0;i < 4;i++)
 45e:	11 31       	cpi	r17, 0x11	; 17
 460:	29 f7       	brne	.-54     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			LCD_movecursor(1,13+i);
			LCD_send_char('*');
			_delay_ms(500);
		}
	
	if((EEPROM_read(EEPROM_PASSWORD_LOCATION1) == arr[0]) && (EEPROM_read(EEPROM_PASSWORD_LOCATION2) == arr[1]) && (EEPROM_read(EEPROM_PASSWORD_LOCATION3) == arr[2]) && (EEPROM_read(EEPROM_PASSWORD_LOCATION4) == arr[3]))
 462:	81 e2       	ldi	r24, 0x21	; 33
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 79 04 	call	0x8f2	; 0x8f2 <EEPROM_read>
 46a:	f7 01       	movw	r30, r14
 46c:	90 81       	ld	r25, Z
 46e:	89 13       	cpse	r24, r25
 470:	27 c0       	rjmp	.+78     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 472:	82 e2       	ldi	r24, 0x22	; 34
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 79 04 	call	0x8f2	; 0x8f2 <EEPROM_read>
 47a:	f7 01       	movw	r30, r14
 47c:	91 81       	ldd	r25, Z+1	; 0x01
 47e:	89 13       	cpse	r24, r25
 480:	1f c0       	rjmp	.+62     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 482:	83 e2       	ldi	r24, 0x23	; 35
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 79 04 	call	0x8f2	; 0x8f2 <EEPROM_read>
 48a:	f7 01       	movw	r30, r14
 48c:	92 81       	ldd	r25, Z+2	; 0x02
 48e:	89 13       	cpse	r24, r25
 490:	17 c0       	rjmp	.+46     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 492:	84 e2       	ldi	r24, 0x24	; 36
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 79 04 	call	0x8f2	; 0x8f2 <EEPROM_read>
 49a:	f7 01       	movw	r30, r14
 49c:	93 81       	ldd	r25, Z+3	; 0x03
 49e:	89 13       	cpse	r24, r25
 4a0:	0f c0       	rjmp	.+30     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	{
		LCD_clr_screen();
 4a2:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_clr_screen>
		LCD_sendstring("Right Pass");
 4a6:	89 e8       	ldi	r24, 0x89	; 137
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
		LCD_movecursor(2,1);
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_movecursor>
		LCD_sendstring("Safe Opened");
 4b6:	84 e9       	ldi	r24, 0x94	; 148
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
		flag = 1;
 4be:	41 c0       	rjmp	.+130    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	}
	else
	{
		tries--;
		if(tries > 0)
 4c0:	f0 e3       	ldi	r31, 0x30	; 48
 4c2:	df 16       	cp	r13, r31
 4c4:	19 f1       	breq	.+70     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
		{
			LCD_clr_screen();
 4c6:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_clr_screen>
			LCD_sendstring("Wrong Pass");
 4ca:	80 ea       	ldi	r24, 0xA0	; 160
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	89 e6       	ldi	r24, 0x69	; 105
 4d6:	98 e1       	ldi	r25, 0x18	; 24
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	80 40       	sbci	r24, 0x00	; 0
 4dc:	90 40       	sbci	r25, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e2:	00 00       	nop
			_delay_ms(1000);
			LCD_clr_screen();
 4e4:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_clr_screen>
			LCD_sendstring("Tries Left : ");
 4e8:	8b ea       	ldi	r24, 0xAB	; 171
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
			LCD_send_char(tries+48);
 4f0:	8d 2d       	mov	r24, r13
 4f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_send_char>
 4f6:	ef ef       	ldi	r30, 0xFF	; 255
 4f8:	f9 e6       	ldi	r31, 0x69	; 105
 4fa:	28 e1       	ldi	r18, 0x18	; 24
 4fc:	e1 50       	subi	r30, 0x01	; 1
 4fe:	f0 40       	sbci	r31, 0x00	; 0
 500:	20 40       	sbci	r18, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 504:	00 c0       	rjmp	.+0      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 506:	00 00       	nop
 508:	da 94       	dec	r13
 50a:	82 cf       	rjmp	.-252    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			_delay_ms(1000);
		}
		else
		{
			LCD_clr_screen();
 50c:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_clr_screen>
			LCD_sendstring("Wrong Pass");
 510:	80 ea       	ldi	r24, 0xA0	; 160
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
			LCD_movecursor(2,1);
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_movecursor>
			LCD_sendstring("Safe Closed");
 520:	89 eb       	ldi	r24, 0xB9	; 185
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendstring>
 528:	0c c0       	rjmp	.+24     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	unsigned char tries = MAXTRIES ;
    LCD_init();
	Keypad_init();
	if(EEPROM_read(EEPROM_STATUS_LOCATION) == NOTPRESSED)
	{
		LCD_sendstring("Set Pass : ");
 52a:	0f 2e       	mov	r0, r31
 52c:	f2 e3       	ldi	r31, 0x32	; 50
 52e:	df 2e       	mov	r13, r31
 530:	f0 2d       	mov	r31, r0
		}
		EEPROM_write(EEPROM_STATUS_LOCATION,0x00);
	}
	while(flag == 0)
	{
		arr[0] = arr[1] = arr[2] = arr[3] = NOTPRESSED;
 532:	0f 2e       	mov	r0, r31
 534:	f6 ec       	ldi	r31, 0xC6	; 198
 536:	ef 2e       	mov	r14, r31
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	ff 2e       	mov	r15, r31
 53c:	f0 2d       	mov	r31, r0
 53e:	0f ef       	ldi	r16, 0xFF	; 255
 540:	67 cf       	rjmp	.-306    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			LCD_sendstring("Safe Closed");
			flag = 1;
		}
	}
	}
}
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	08 95       	ret

00000556 <DIO_setPinDirection>:
{
	DIO_setPinValue(port,0,GET_BIT(value,0));
	DIO_setPinValue(port,1,GET_BIT(value,1));
	DIO_setPinValue(port,2,GET_BIT(value,2));
	DIO_setPinValue(port,3,GET_BIT(value,3));
}
 556:	82 34       	cpi	r24, 0x42	; 66
 558:	19 f1       	breq	.+70     	; 0x5a0 <DIO_setPinDirection+0x4a>
 55a:	18 f4       	brcc	.+6      	; 0x562 <DIO_setPinDirection+0xc>
 55c:	81 34       	cpi	r24, 0x41	; 65
 55e:	39 f0       	breq	.+14     	; 0x56e <DIO_setPinDirection+0x18>
 560:	08 95       	ret
 562:	83 34       	cpi	r24, 0x43	; 67
 564:	b1 f1       	breq	.+108    	; 0x5d2 <DIO_setPinDirection+0x7c>
 566:	84 34       	cpi	r24, 0x44	; 68
 568:	09 f4       	brne	.+2      	; 0x56c <DIO_setPinDirection+0x16>
 56a:	4c c0       	rjmp	.+152    	; 0x604 <DIO_setPinDirection+0xae>
 56c:	08 95       	ret
 56e:	41 30       	cpi	r20, 0x01	; 1
 570:	59 f4       	brne	.+22     	; 0x588 <DIO_setPinDirection+0x32>
 572:	2a b3       	in	r18, 0x1a	; 26
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_setPinDirection+0x28>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_setPinDirection+0x24>
 582:	82 2b       	or	r24, r18
 584:	8a bb       	out	0x1a, r24	; 26
 586:	08 95       	ret
 588:	2a b3       	in	r18, 0x1a	; 26
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_setPinDirection+0x3e>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_setPinDirection+0x3a>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	8a bb       	out	0x1a, r24	; 26
 59e:	08 95       	ret
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	59 f4       	brne	.+22     	; 0x5ba <DIO_setPinDirection+0x64>
 5a4:	27 b3       	in	r18, 0x17	; 23
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_setPinDirection+0x5a>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_setPinDirection+0x56>
 5b4:	82 2b       	or	r24, r18
 5b6:	87 bb       	out	0x17, r24	; 23
 5b8:	08 95       	ret
 5ba:	27 b3       	in	r18, 0x17	; 23
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_setPinDirection+0x70>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_setPinDirection+0x6c>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	87 bb       	out	0x17, r24	; 23
 5d0:	08 95       	ret
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	59 f4       	brne	.+22     	; 0x5ec <DIO_setPinDirection+0x96>
 5d6:	24 b3       	in	r18, 0x14	; 20
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_setPinDirection+0x8c>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_setPinDirection+0x88>
 5e6:	82 2b       	or	r24, r18
 5e8:	84 bb       	out	0x14, r24	; 20
 5ea:	08 95       	ret
 5ec:	24 b3       	in	r18, 0x14	; 20
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_setPinDirection+0xa2>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_setPinDirection+0x9e>
 5fc:	80 95       	com	r24
 5fe:	82 23       	and	r24, r18
 600:	84 bb       	out	0x14, r24	; 20
 602:	08 95       	ret
 604:	41 30       	cpi	r20, 0x01	; 1
 606:	59 f4       	brne	.+22     	; 0x61e <DIO_setPinDirection+0xc8>
 608:	21 b3       	in	r18, 0x11	; 17
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_setPinDirection+0xbe>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_setPinDirection+0xba>
 618:	82 2b       	or	r24, r18
 61a:	81 bb       	out	0x11, r24	; 17
 61c:	08 95       	ret
 61e:	21 b3       	in	r18, 0x11	; 17
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_setPinDirection+0xd4>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_setPinDirection+0xd0>
 62e:	80 95       	com	r24
 630:	82 23       	and	r24, r18
 632:	81 bb       	out	0x11, r24	; 17
 634:	08 95       	ret

00000636 <DIO_setPinValue>:
 636:	82 34       	cpi	r24, 0x42	; 66
 638:	19 f1       	breq	.+70     	; 0x680 <DIO_setPinValue+0x4a>
 63a:	18 f4       	brcc	.+6      	; 0x642 <DIO_setPinValue+0xc>
 63c:	81 34       	cpi	r24, 0x41	; 65
 63e:	39 f0       	breq	.+14     	; 0x64e <DIO_setPinValue+0x18>
 640:	08 95       	ret
 642:	83 34       	cpi	r24, 0x43	; 67
 644:	b1 f1       	breq	.+108    	; 0x6b2 <DIO_setPinValue+0x7c>
 646:	84 34       	cpi	r24, 0x44	; 68
 648:	09 f4       	brne	.+2      	; 0x64c <DIO_setPinValue+0x16>
 64a:	4c c0       	rjmp	.+152    	; 0x6e4 <DIO_setPinValue+0xae>
 64c:	08 95       	ret
 64e:	41 30       	cpi	r20, 0x01	; 1
 650:	59 f4       	brne	.+22     	; 0x668 <DIO_setPinValue+0x32>
 652:	2b b3       	in	r18, 0x1b	; 27
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_setPinValue+0x28>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_setPinValue+0x24>
 662:	82 2b       	or	r24, r18
 664:	8b bb       	out	0x1b, r24	; 27
 666:	08 95       	ret
 668:	2b b3       	in	r18, 0x1b	; 27
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_setPinValue+0x3e>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_setPinValue+0x3a>
 678:	80 95       	com	r24
 67a:	82 23       	and	r24, r18
 67c:	8b bb       	out	0x1b, r24	; 27
 67e:	08 95       	ret
 680:	41 30       	cpi	r20, 0x01	; 1
 682:	59 f4       	brne	.+22     	; 0x69a <DIO_setPinValue+0x64>
 684:	28 b3       	in	r18, 0x18	; 24
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_setPinValue+0x5a>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_setPinValue+0x56>
 694:	82 2b       	or	r24, r18
 696:	88 bb       	out	0x18, r24	; 24
 698:	08 95       	ret
 69a:	28 b3       	in	r18, 0x18	; 24
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_setPinValue+0x70>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_setPinValue+0x6c>
 6aa:	80 95       	com	r24
 6ac:	82 23       	and	r24, r18
 6ae:	88 bb       	out	0x18, r24	; 24
 6b0:	08 95       	ret
 6b2:	41 30       	cpi	r20, 0x01	; 1
 6b4:	59 f4       	brne	.+22     	; 0x6cc <DIO_setPinValue+0x96>
 6b6:	25 b3       	in	r18, 0x15	; 21
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_setPinValue+0x8c>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	6a 95       	dec	r22
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_setPinValue+0x88>
 6c6:	82 2b       	or	r24, r18
 6c8:	85 bb       	out	0x15, r24	; 21
 6ca:	08 95       	ret
 6cc:	25 b3       	in	r18, 0x15	; 21
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_setPinValue+0xa2>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_setPinValue+0x9e>
 6dc:	80 95       	com	r24
 6de:	82 23       	and	r24, r18
 6e0:	85 bb       	out	0x15, r24	; 21
 6e2:	08 95       	ret
 6e4:	41 30       	cpi	r20, 0x01	; 1
 6e6:	59 f4       	brne	.+22     	; 0x6fe <DIO_setPinValue+0xc8>
 6e8:	22 b3       	in	r18, 0x12	; 18
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_setPinValue+0xbe>
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	6a 95       	dec	r22
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_setPinValue+0xba>
 6f8:	82 2b       	or	r24, r18
 6fa:	82 bb       	out	0x12, r24	; 18
 6fc:	08 95       	ret
 6fe:	22 b3       	in	r18, 0x12	; 18
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_setPinValue+0xd4>
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	6a 95       	dec	r22
 70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_setPinValue+0xd0>
 70e:	80 95       	com	r24
 710:	82 23       	and	r24, r18
 712:	82 bb       	out	0x12, r24	; 18
 714:	08 95       	ret

00000716 <DIO_getPinValue>:
 716:	82 34       	cpi	r24, 0x42	; 66
 718:	d9 f0       	breq	.+54     	; 0x750 <DIO_getPinValue+0x3a>
 71a:	18 f4       	brcc	.+6      	; 0x722 <DIO_getPinValue+0xc>
 71c:	81 34       	cpi	r24, 0x41	; 65
 71e:	31 f0       	breq	.+12     	; 0x72c <DIO_getPinValue+0x16>
 720:	4d c0       	rjmp	.+154    	; 0x7bc <DIO_getPinValue+0xa6>
 722:	83 34       	cpi	r24, 0x43	; 67
 724:	39 f1       	breq	.+78     	; 0x774 <DIO_getPinValue+0x5e>
 726:	84 34       	cpi	r24, 0x44	; 68
 728:	b9 f1       	breq	.+110    	; 0x798 <DIO_getPinValue+0x82>
 72a:	48 c0       	rjmp	.+144    	; 0x7bc <DIO_getPinValue+0xa6>
 72c:	29 b3       	in	r18, 0x19	; 25
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	06 2e       	mov	r0, r22
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_getPinValue+0x24>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_getPinValue+0x20>
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	82 23       	and	r24, r18
 742:	93 23       	and	r25, r19
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_getPinValue+0x34>
 746:	95 95       	asr	r25
 748:	87 95       	ror	r24
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_getPinValue+0x30>
 74e:	08 95       	ret
 750:	26 b3       	in	r18, 0x16	; 22
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	06 2e       	mov	r0, r22
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_getPinValue+0x48>
 75a:	88 0f       	add	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	0a 94       	dec	r0
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_getPinValue+0x44>
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	82 23       	and	r24, r18
 766:	93 23       	and	r25, r19
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_getPinValue+0x58>
 76a:	95 95       	asr	r25
 76c:	87 95       	ror	r24
 76e:	6a 95       	dec	r22
 770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_getPinValue+0x54>
 772:	08 95       	ret
 774:	23 b3       	in	r18, 0x13	; 19
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	06 2e       	mov	r0, r22
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_getPinValue+0x6c>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_getPinValue+0x68>
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	82 23       	and	r24, r18
 78a:	93 23       	and	r25, r19
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_getPinValue+0x7c>
 78e:	95 95       	asr	r25
 790:	87 95       	ror	r24
 792:	6a 95       	dec	r22
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_getPinValue+0x78>
 796:	08 95       	ret
 798:	20 b3       	in	r18, 0x10	; 16
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	06 2e       	mov	r0, r22
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_getPinValue+0x90>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_getPinValue+0x8c>
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	82 23       	and	r24, r18
 7ae:	93 23       	and	r25, r19
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_getPinValue+0xa0>
 7b2:	95 95       	asr	r25
 7b4:	87 95       	ror	r24
 7b6:	6a 95       	dec	r22
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_getPinValue+0x9c>
 7ba:	08 95       	ret
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	08 95       	ret

000007c0 <DIO_connectInternalPullup>:
 7c0:	82 34       	cpi	r24, 0x42	; 66
 7c2:	19 f1       	breq	.+70     	; 0x80a <DIO_connectInternalPullup+0x4a>
 7c4:	18 f4       	brcc	.+6      	; 0x7cc <DIO_connectInternalPullup+0xc>
 7c6:	81 34       	cpi	r24, 0x41	; 65
 7c8:	39 f0       	breq	.+14     	; 0x7d8 <DIO_connectInternalPullup+0x18>
 7ca:	08 95       	ret
 7cc:	83 34       	cpi	r24, 0x43	; 67
 7ce:	b1 f1       	breq	.+108    	; 0x83c <DIO_connectInternalPullup+0x7c>
 7d0:	84 34       	cpi	r24, 0x44	; 68
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <DIO_connectInternalPullup+0x16>
 7d4:	4c c0       	rjmp	.+152    	; 0x86e <__stack+0xf>
 7d6:	08 95       	ret
 7d8:	41 30       	cpi	r20, 0x01	; 1
 7da:	59 f4       	brne	.+22     	; 0x7f2 <DIO_connectInternalPullup+0x32>
 7dc:	2b b3       	in	r18, 0x1b	; 27
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_connectInternalPullup+0x28>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_connectInternalPullup+0x24>
 7ec:	82 2b       	or	r24, r18
 7ee:	8b bb       	out	0x1b, r24	; 27
 7f0:	08 95       	ret
 7f2:	2b b3       	in	r18, 0x1b	; 27
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_connectInternalPullup+0x3e>
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	6a 95       	dec	r22
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_connectInternalPullup+0x3a>
 802:	80 95       	com	r24
 804:	82 23       	and	r24, r18
 806:	8b bb       	out	0x1b, r24	; 27
 808:	08 95       	ret
 80a:	41 30       	cpi	r20, 0x01	; 1
 80c:	59 f4       	brne	.+22     	; 0x824 <DIO_connectInternalPullup+0x64>
 80e:	28 b3       	in	r18, 0x18	; 24
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_connectInternalPullup+0x5a>
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	6a 95       	dec	r22
 81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_connectInternalPullup+0x56>
 81e:	82 2b       	or	r24, r18
 820:	88 bb       	out	0x18, r24	; 24
 822:	08 95       	ret
 824:	28 b3       	in	r18, 0x18	; 24
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <DIO_connectInternalPullup+0x70>
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	6a 95       	dec	r22
 832:	e2 f7       	brpl	.-8      	; 0x82c <DIO_connectInternalPullup+0x6c>
 834:	80 95       	com	r24
 836:	82 23       	and	r24, r18
 838:	88 bb       	out	0x18, r24	; 24
 83a:	08 95       	ret
 83c:	41 30       	cpi	r20, 0x01	; 1
 83e:	59 f4       	brne	.+22     	; 0x856 <DIO_connectInternalPullup+0x96>
 840:	25 b3       	in	r18, 0x15	; 21
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	02 c0       	rjmp	.+4      	; 0x84c <DIO_connectInternalPullup+0x8c>
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	6a 95       	dec	r22
 84e:	e2 f7       	brpl	.-8      	; 0x848 <DIO_connectInternalPullup+0x88>
 850:	82 2b       	or	r24, r18
 852:	85 bb       	out	0x15, r24	; 21
 854:	08 95       	ret
 856:	25 b3       	in	r18, 0x15	; 21
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <DIO_connectInternalPullup+0x9e>
 866:	80 95       	com	r24
 868:	82 23       	and	r24, r18
 86a:	85 bb       	out	0x15, r24	; 21
 86c:	08 95       	ret
 86e:	41 30       	cpi	r20, 0x01	; 1
 870:	59 f4       	brne	.+22     	; 0x888 <__stack+0x29>
 872:	22 b3       	in	r18, 0x12	; 18
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	6a 95       	dec	r22
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	82 2b       	or	r24, r18
 884:	82 bb       	out	0x12, r24	; 18
 886:	08 95       	ret
 888:	22 b3       	in	r18, 0x12	; 18
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	6a 95       	dec	r22
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	80 95       	com	r24
 89a:	82 23       	and	r24, r18
 89c:	82 bb       	out	0x12, r24	; 18
 89e:	08 95       	ret

000008a0 <DIO_writeHighNibble>:

void DIO_writeHighNibble(unsigned char port,unsigned char value)
{
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	d8 2f       	mov	r29, r24
 8a6:	c6 2f       	mov	r28, r22
	DIO_setPinValue(port,4,GET_BIT(value,0));
 8a8:	46 2f       	mov	r20, r22
 8aa:	41 70       	andi	r20, 0x01	; 1
 8ac:	64 e0       	ldi	r22, 0x04	; 4
 8ae:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	DIO_setPinValue(port,5,GET_BIT(value,1));
 8b2:	c1 fb       	bst	r28, 1
 8b4:	44 27       	eor	r20, r20
 8b6:	40 f9       	bld	r20, 0
 8b8:	65 e0       	ldi	r22, 0x05	; 5
 8ba:	8d 2f       	mov	r24, r29
 8bc:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	DIO_setPinValue(port,6,GET_BIT(value,2));
 8c0:	c2 fb       	bst	r28, 2
 8c2:	44 27       	eor	r20, r20
 8c4:	40 f9       	bld	r20, 0
 8c6:	66 e0       	ldi	r22, 0x06	; 6
 8c8:	8d 2f       	mov	r24, r29
 8ca:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
	DIO_setPinValue(port,7,GET_BIT(value,3));
 8ce:	c3 fb       	bst	r28, 3
 8d0:	44 27       	eor	r20, r20
 8d2:	40 f9       	bld	r20, 0
 8d4:	67 e0       	ldi	r22, 0x07	; 7
 8d6:	8d 2f       	mov	r24, r29
 8d8:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_setPinValue>
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	08 95       	ret

000008e2 <EEPROM_write>:
#include "BIT_MATH.h"
#include "EEPROM_private.h"

void EEPROM_write(unsigned short address,unsigned char data)
{
	EEARL = (char)address;
 8e2:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char)(address>>8);
 8e4:	9f bb       	out	0x1f, r25	; 31
	
	EEDR = data;
 8e6:	6d bb       	out	0x1d, r22	; 29
	
	SET_BIT(EECR,EEMWE);
 8e8:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
 8ea:	e1 9a       	sbi	0x1c, 1	; 28
	
	while(GET_BIT(EECR,EEWE)==1);
 8ec:	e1 99       	sbic	0x1c, 1	; 28
 8ee:	fe cf       	rjmp	.-4      	; 0x8ec <EEPROM_write+0xa>
}
 8f0:	08 95       	ret

000008f2 <EEPROM_read>:

unsigned char EEPROM_read(unsigned short address)
{
	EEARL = (char)address;
 8f2:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char)(address>>8);
 8f4:	9f bb       	out	0x1f, r25	; 31
	
	SET_BIT(EECR,EERE);
 8f6:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
 8f8:	8d b3       	in	r24, 0x1d	; 29
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
